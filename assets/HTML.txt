



1 hour of web designing














Table of content

Table of content
Introduction
What is a website made of?
HTML: The structural foundation of a web page
HTML tags
Text Formatting:
Links:
Images:
Lists:
Special HTML characters:
Table:
Forms:
HTML5 Semantic Elements:
CSS
CSS Syntax
The Cascade
Types of CSS
CSS Selectors
CSS Box Model
CSS Properties
Backgrounds
Borders
Text formatting
CSS Fonts
CSS Links
CSS Float
CSS Overflow
960 Grid System:
12 column grid:
16 column grid:
Prefix and Suffix:
Alpha and Omega class
Example

 

Introduction

How to start designing your own website using HTML and a little bit of CSS? Are you wondering that too? And you don’t know where to start!
Well then this document is just the thing you need. At least, that’s what I hope it is.
So, first things first:
HTML is an abbreviation for Hyper Text Markup Language. HTML is what defines the structure of our web-page. We write our content within tags of HTML.

CSS is an abbreviation for Cascading Style Sheets. It is used to beautify our content: which entity would be placed where, what will be its font, color or style, etc.

Let’s start then.
 
What is a website made of?

 
A website is basically a collection of web-pages, which are mostly written in HTML or other comparable  markup language .
Now there are basically two types of websites: 
a.	Static website: these are the website where the content doesn’t change, and they don’t have databases. In simple terms, they don’t interact much with the netizens.
b.	Dynamic website: these are the websites where content tends to change, and they do have databases. They do interact with the netizens.

HTML: The structure of a web page

 
HTML is a series of tags that tells web browsers how to render, or display, a web page. We wrap our content in these tags to describe the elements on the page and how they should be structured. 
The basic structure of a HTML document looks like this:
 
●	<!Doctype HTML> :  helps the browser differentiate between previous versions of HTML and HTML5.
●	<html> :  is the root element of an HTML page.
●	<head> : is a container for all head elements.
●	<meta> : contains meta information of the HTML page.
●	<title> : it specifies the title of the web page.
●	<body> : consists of the main content of the web page.

What you will need?
Just a text-editor.


HTML tags

The HTML tags are elements surrounded by angle brackets.
<tag name> content </tag name>
●	Tags are generally written in pairs (opening-closing tag). For example: <p> </p>
●	Some tags are unpaired too. For example: <br>, <hr> etc.
●	HTML elements can have attributes.
o	Attributes provide additional information about HTML elements.

So let’s learn about some basic HTML tags.


1.	Text Formatting:
a.	Headings: Defines an important heading in your text. You can use <h1> to <h6>, with the highest number resulting in the smallest font size.
Example: 




b.	Paragraphs: inserts a paragraph break. Defines each paragraph.
Example: 




c.	Line Breaks: Line breaks are used instead of paragraphs, when you want to create a line without starting a new paragraph.
Example: 




d.	Bold Text: Makes the weight of your font bold. 
Example:




e.	Strong Text: Though it looks same as bold, but it is semantic. Instead of simply being a style, strong text shows how the text should be read or understood (especially by the screen readers and web crawlers).
Example: 




f.	Italic Text: Makes your text italicized.
Example:




g.	Emphasized Text: It have the same logic as of bold and strong tags. It looks same as italics but it is semantic. It specifies that the text should be emphasized when read.
Example:





h.	Underlined Text: Underlines your text.
Example:




i.	Strikethrough:  Places a line through your text to strike it out.
Example:



j.	Block Quotes: These are useful when quoting someone or when you need a particular part of your text to stand out.
Example:




2.	Links:
a.	Text Link: It is used to add a link to a specific text or a word.
Example:




b.	Link with target: It is used to open link in different window or tab instead of in same web page.
Example:




c.	Link to an email address: It opens the user’s email program to quickly send an email to address supplied.
Example:




d.	Anchored Link: It is used to jump to a particular part of the page with click of a link.
Example:







3.	Images:
a.	Simple Image tag: This includes an image in your post.
Example:




b.	Image link: It is used when we want to add link to our images, i.e., when we want to redirect user to different web page or section on clicking on image.
Example:





c.	Image width and height: We add the attributes width and height to give the dimensions of the image. However, it’s usually best to have them resized prior to using them.
Example:






4.	Lists:
a.	Ordered List: It creates a numbered list.
Example:









b.	Unordered list with bullets: It creates list with bullets instead of numbers or alphabet.
Example:








5.	Special HTML characters:
These characters are used to create special characters like copyright, ampersand, trademark etc.
a.	Copyright ©:



b.	Ampersand &:



c.	Trademark ™:


d.	Non-breaking space:



e.	Registered trademark ®:




6.	Table:
We can create tables in HTML using <table></table> tag. Inside this tag we use different tags to create the structure of table:
a.	<tr></tr>: This is used to create a row of table.
b.	<th></th>: This is used to create the heading of columns.
c.	<td></td>: This is used for creating column cells with values.

Example:













7.	Forms:
We can create forms for our users to fill, in order to get feedbacks or information using the <form></form> tag.
Along with this tag we use <input> tag to create textbox for user to write information into and buttons to submit the information.
	Input types:
a.	Text: for simple text.
b.	Email: for user to give email.
c.	Color: provides color palette to user to choose color.
d.	Date: to enter date.
e.	Password: defines password field. The characters in password field are masked (asterisk character is shown instead).
f.	Radio: defines a radio button
g.	Checkbox: defines checkbox.
h.	Button: defines simple buttons.
i.	Submit: defines button used to submit the form information.



Example:

















The action attribute tells the browser where to send the information that we have gathered in the form. There is another attribute method which tells the browser, in which method should the form be sent. The method mainly can be GET or POST.
 

HTML5 Semantic Elements:

Semantic elements are elements with a meaning. They describes their meaning to both the browser and the developer. They are a great help for web crawlers, which crawl your web pages in search of content related to some keywords.
Examples of non-semantic elements: <div>, <span>.
Examples of semantic elements: <form>, <header>.
 
a.	<header>: The <header> element specifies a header for a document or section. The <header> element should be used as a container for introductory content.
b.	<nav>: The <nav> element defines a set of navigation links.
c.	<section>: The <section> element defines a section in a document.
d.	<article>: The <article> element specifies independent, self-contained content.
e.	<aside>: The <aside> element defines some content aside from the content it is placed in (like a sidebar).
f.	<footer>: The <footer> element specifies a footer for a document or section. A footer typically contains the author of the document, copyright information, links to terms of use, contact information, etc.
 

CSS
A CSS (cascading style sheet) is a coding type that lets you style elements of your HTML pages by applying classes to it. To put it simply, HTML creates the pages and content, and CSS takes care of the presentation of those pages and determines how things are displayed or look.

CSS Syntax
	 
The selector points to HTML element that you want to style.
The declaration block contains one or more declarations separated by semicolons.
Each declaration includes a property name, and a value separated by a colon.

The Cascade

A very important piece of CSS is the “Cascading” part. The browser reads style definitions from top to bottom in a style sheet. This means that a style you define lower in the style sheet will override any previous styles defined earlier in the style sheet.
You can also have a stylesheet override another stylesheet. This is how we are able to override predefined styles from our blog themes or plugin widgets, as our custom style sheet is usually the last one read by the browser.

Types of CSS

a.	Internal CSS: An internal style sheet just means that any styles you create will be coded right into the HTML of a particular page, in between the <head> and </head> tags.
Example: 



b.	External CSS: External means that all of your styles are contained within one single .css file. It is recommended to use external style sheets to save on your site’s loading time. Also, it’s much more convenient to just have everything in one place.
Example: 




CSS Selectors
a.	Element selector: The element selector selects elements based on the element name.
Example: 






b.	Id selector: The id selector uses the id attribute of an HTML element to select a specific element. An id should be unique within a page, so the id selector is used if you want to select a single, unique element. Do NOT start an ID name with a number!
Example: 






c.	Class selector: The class selector selects elements with a specific class attribute. To select elements with a specific class, write a period character, followed by the name of the class:
Example: 





d.	Grouping selectors:  If you have elements with the same style definitions, you can group the selectors, to minimize the code. To group selectors, separate each selector with a comma.
Example: 


      e. Universal selectors: The CSS universal selector (*) matches elements of any type.
	Example:
	


CSS Box Model
 
HTML elements can be considered as boxes. In CSS, the term "box model" is used when talking about design and layout.
The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content. 
●	Content - content of the box, where text and images appear
●	Padding - clears an area around the content, it is transparent.
●	Border - border that goes around the padding and content
●	Margin - clears an area outside the border, it is transparent.
Lets understand it with an example, consider we want to style a <p> element to have a total width of 250px:

p {
   width: 220px;
  padding: 10px;
  margin: 4px;
  border: 1px solid black;
}
So the total width will be calculated as: 
	220(width) + 20(left and right padding) + 8(left and right margin) + 2(left and right border) = 250px
Similar will be the case for the total height. The given height, top and bottom padding, top and bottom margin and top and bottom border will all together account for the total height.

CSS Properties
Backgrounds
Background property is used to define the background of an element. The background can be an image or a color.
The background properties of CSS are as follows:

Property	Description	Example
background-color	specifies the background color of an element	p {
  background-color: black;
}
background-image	specifies the image to be kept as the background for an element	p {
  background-image: url(“img.png”);
}
background-repeat	specifies if the background image should repeat horizontally, vertically, in both direction , or in no direction.	p {
  background-image: url(“img.png”);
  background-repeat: repeat-x;
}
background-position	specifies position of the background 	p {
  background-image: url(“img.png”);
  background-repeat: no-repeat;
  background-position: top left;
}
background-attachment	specifies whether the background should be fixed or not, i.e., scrolls with rest of the page or not	p {
  background-image: url(“img.png”);
  background-repeat: repeat-x;
  background-attachment: fixed;
}

Borders
With the border property, we can specify the width, color and the style of the border for the element.
The CSS border properties are as follows:

Property	Description	Example
border-style	specifies what kind of border to display(dotted, dashed, solid, ridge, groove etc)	p {
  border-style: dotted dashed solid double;
}
border-width	specifies the width of the four borders(left, top, right, bottom)	p {
  border-style: solid;
  border-width: 5px;
}
border-color	specifies the color of the border	p {
  border-style: solid;
  border-width: 5px;
  border-color: green;    
}








Text formatting

Property	Description	Example
color	specifies the color of text	p {
  color: white;
}
text-align	specifies the alignment of text(center, left, right, justified)	p {
  text-align: justify;
}
text-decoration	adds or removes decorations from text(underline, none etc)	p {
  text-decoration: strike-through;
}
spacing	specifies the space between letters and words in the text	p {
  letter-spacing: 1px;
  word-spacing: 2px;
}
text-transform	specifies the case of text(uppercase, lowercase, capitalize)	p {
  text-transform: uppercase;
}
text-direction	specifies the direction of text(ltr, rtl etc)	p {
  text-direction: rtl;
}
text-shadow	adds shadow to the text(horizontal, vertical, color)	p {
   text-shadow: 1px -2px blue;
}

CSS Fonts

Property	Description	Example
font-family	specifies the font family of text	p {
  font-family: san-serif, serif;
}
font-size	specifies the font size of text	p {
  font-size: 10px;
}
font-style	specifies the font style of text(normal, italic, oblique)	p {
  font-style: italic; }
CSS Links
The links can be styled differently depending on what state they are in.

Property	Description	Example
a:link	a normal, unvisited link	a:link {
  color: red;
}
a:visited	a link the user has visited	a:visited {
  color: blue;
}
a:hover	a link when the user mouses over it	a:hover {
  color: green;
}
a:active	a link the moment it is clicked	a:active {
  color: pink;
}

CSS Float
The CSS float property specifies how an element should float.
 
The CSS clear property specifies what elements can float beside the cleared element and on which side.
The float property can have one of the following values:
●	left - The element floats to the left of its container
●	right- The element floats to the right of its container
●	none - The element does not float (will be displayed just where it occurs in the text). This is default
●	inherit - The element inherits the float value of its parent
Example:	
img {	float: right; }

CSS Overflow
The overflow property specifies whether to clip content or to add scrollbars when the content of an element is too big to fit in a specified area.
The overflow property has the following values:
●	visible - Default. The overflow is not clipped. It renders outside the element's box
	 
●	hidden - The overflow is clipped, and the rest of the content will be invisible
	 
●	scroll - The overflow is clipped, but a scrollbar is added to see the rest of the content
	 
●	auto - If overflow is clipped, a scrollbar should be added to see the rest of the content
	 

960 Grid System:
The 960 Grid System is simply a way to lay out websites using a grid that is 960 pixels wide. The 960 GS   is mainly of two types: a 12-column grid and a 16-column grid (a 24-column version is also there).
The 960 grid works on the concept where we divide the viewport in columns ranging from grid 1 to n-column depending on the type of 960 GS you use.
While using the 960 grid we just need to add the class name of that particular column in respect to 960 GS, whose dimensions we want for our element.
Let's take a brief look at the two GS:

a)	12 column grid:

   








In the 12-column version, the narrowest column is 60 pixels wide. Each column after that increases by 80 pixels.
So the available column widths are: 60, 140, 220, 300, 380, 460, 540, 620, 700, 780, 860 and 940.

b)	16 column grid:
Similarly, in the 16-column version, the narrowest column is 40 pixels wide and each column after that increases by 60 pixels.
So the available column widths are: 40, 100, 160, 220, 280, 340, 400, 460, 520, 580, 640, 700, 760, 820, 880 and 940.



















The classes are named according to their size with the grid_1 CSS class being the narrowest and grid_12 CSS class being the widest (grid_16 is the widest in the 16-column version). To fill a page’s width, the trick to keep in mind is that the numbers assigned to your selected classes must equal 12 in the 12-column version and 16 in the 16-column version.

Prefix and Suffix:

To create empty space in a layout we apply the prefix and suffix classes to our divs.
So if we are to leave a blank space, that is, the width of one column before an element, use prefix_1 class, or after an element using suffix_1 class.




Alpha and Omega class
The alpha class refers to the first child div and omega class refers to the last child div of a parent div. We use these classes to align the child divs with respect to outermost margins of the page.
.alpha {
    margin-left: 0;
}
.omega {
    margin-right: 0;
}
 
 
Example

















 

Now that you have the basic knowledge of HTML, CSS and 960 grid system, you are all set to make your own basic webpage. So go ahead try it out. And for those who want to dive more into the topic, you guys can refer to developers.mozilla site. 
Stay tuned for more.
